package com.check;

import com.lowagie.text.pdf.*;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.security.SecureRandom;
import java.util.*;

public class SecureBot extends TelegramLongPollingBot {

    private static final String BOT_USERNAME = "@apkojdkoadjawjdapwoidbot"; // –ò–º—è –±–æ—Ç–∞
    private static final String BOT_TOKEN = "7931742211:AAHRbYo_WRFXPEq2F6YtmIArcma6kcVQclY"; // –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    private static final int OTP_VALIDITY_MINUTES = 10000; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–∞—Ä–æ–ª—è –≤ –º–∏–Ω—É—Ç–∞—Ö

    private final Map<Long, Boolean> authorizedUsers = new HashMap<>();
    private final Map<String, OTP> otpStorage = new HashMap<>();

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText();

            if (text.equals("/start")) {
                handleStartCommand(chatId);
            } else if (text.startsWith("/otp")) {
                handleOtpCommand(chatId);
            } else if (otpStorage.containsKey(text)) {
                handleOtpValidation(chatId, text);
            } else if (authorizedUsers.getOrDefault(chatId, false)) {
                handleAuthorizedUser(chatId, text);
            } else {
                sendMessage(chatId, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.");
            }
        }
    }

    private void handleStartCommand(long chatId) {
        sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (OTP).");
    }

    private void handleOtpCommand(long chatId) {
        String otp = generateOtp();
        otpStorage.put(otp, new OTP(chatId, System.currentTimeMillis()));

        sendMessage(chatId, "üîë –í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: `" + otp + "`\n" +
                "‚è≥ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ " + OTP_VALIDITY_MINUTES + " –º–∏–Ω—É—Ç.");
    }

    private void handleOtpValidation(long chatId, String otp) {
        OTP storedOtp = otpStorage.get(otp);

        if (storedOtp != null && isOtpValid(storedOtp)) {
            authorizedUsers.put(chatId, true);
            otpStorage.remove(otp);

            sendMessage(chatId, "‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.");
        } else {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π –ø–∞—Ä–æ–ª—å. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.");
        }
    }

    private void handleAuthorizedUser(long chatId, String text) {
        sendMessage(chatId, "üéâ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + text);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    }

    private boolean isOtpValid(OTP otp) {
        long currentTime = System.currentTimeMillis();
        return currentTime - otp.getTimestamp() <= OTP_VALIDITY_MINUTES * 60 * 1000;
    }

    private String generateOtp() {
        SecureRandom random = new SecureRandom();
        StringBuilder otp = new StringBuilder();

        for (int i = 0; i < 6; i++) {
            otp.append(random.nextInt(10)); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9
        }
        return otp.toString();
    }

    private void sendMessage(long chatId, String text) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText(text);
            message.setParseMode("Markdown");
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return BOT_USERNAME;
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    public static void main(String[] args) {
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(new SecureBot());
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private static class OTP {
        private final long chatId;
        private final long timestamp;

        public OTP(long chatId, long timestamp) {
            this.chatId = chatId;
            this.timestamp = timestamp;
        }

        public long getChatId() {
            return chatId;
        }

        public long getTimestamp() {
            return timestamp;
        }
    }
}
